diff -aur ndiswrapper-1.59.old/driver/crt.c ndiswrapper-1.59.new/driver/crt.c
--- ndiswrapper-1.59.old/driver/crt.c	2013-11-28 20:42:35.000000000 +0100
+++ ndiswrapper-1.59.new/driver/crt.c	2014-04-11 20:39:22.384962602 +0200
@@ -467,7 +467,7 @@
 noregparm void WIN_FUNC(_win_srand,1)
 	(UINT seed)
 {
-	net_srandom(seed);
+	prandom_seed((__force u32)(seed));
 }
 
 noregparm int WIN_FUNC(rand,0)
diff -aur ndiswrapper-1.59.old/driver/ntoskernel.h ndiswrapper-1.59.new/driver/ntoskernel.h
--- ndiswrapper-1.59.old/driver/ntoskernel.h	2013-11-28 20:42:36.000000000 +0100
+++ ndiswrapper-1.59.new/driver/ntoskernel.h	2014-04-11 20:44:03.491617236 +0200
@@ -347,7 +347,7 @@
 #define netdev_notifier_info_to_dev(x) ((struct net_device *)(x))
 #endif
 
-#ifdef INIT_COMPLETION
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3,13,0)
 static inline void reinit_completion(struct completion *x)
 {
 	INIT_COMPLETION(*x);
@@ -797,9 +797,8 @@
 #define nt_spin_unlock_irqrestore(lock, flags)				\
 do {									\
 	nt_spin_unlock(lock);						\
-	preempt_enable_no_resched();					\
+	preempt_enable();					\
 	local_irq_restore(flags);					\
-	preempt_check_resched();					\
 } while (0)
 
 static inline ULONG SPAN_PAGES(void *ptr, SIZE_T length)
diff -aur ndiswrapper-1.59.old/driver/ndis.c ndiswrapper-1.59.new/driver/ndis.c
--- ndiswrapper-1.59.old/driver/ndis.c	2013-11-28 14:42:36.000000000 -0500
+++ ndiswrapper-1.59.new/driver/ndis.c	2015-06-20 12:03:30.211735468 -0400
@@ -438,7 +438,7 @@
 	struct wrap_device_setting *setting;
 	mutex_lock(&loader_mutex);
 	nt_list_for_each_entry(setting, setting_list, list) {
-		if (strnicmp(keyname, setting->name, length) == 0) {
+		if (strcasecmp(keyname, setting->name, length) == 0) {
 			TRACE2("setting %s='%s'", keyname, setting->value);
 			mutex_unlock(&loader_mutex);
 			*param = ndis_encode_setting(setting, type);
@@ -502,7 +502,7 @@
 
 	mutex_lock(&loader_mutex);
 	nt_list_for_each_entry(setting, &nmb->wnd->wd->settings, list) {
-		if (strnicmp(keyname, setting->name, ansi.length) == 0) {
+		if (strcasecmp(keyname, setting->name, ansi.length) == 0) {
 			mutex_unlock(&loader_mutex);
 			if (ndis_decode_setting(setting, param))
 				*status = NDIS_STATUS_FAILURE;
